/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.28497 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';

import { Router } from '@angular/router';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { NotifficationsService, MessageDescription, Status } from './shared/services/notiffications.service';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ErrorHandler {
    constructor(public router: Router,
        public notifficationsService: NotifficationsService) { }

    handleErrors(error: any) {
        if (error.status === 401) {
            sessionStorage.clear();
            this.router.navigate(['/login']);
            this.notifficationsService.notify(
                'Please log in', Status.Error, 'Unauthorized');
        } else if (error.status === 403) {
            // Forbidden
            this.router.navigate(['/login']);
            this.notifficationsService.notify(
                'Please log in', Status.Error, 'Unauthorized');
        } else if (error.status === 500) {
            // 1st case for debug purposes
            if (error.message)
                this.notifficationsService.notify(
                    'Server error', Status.Error, error.message);
            else
                this.notifficationsService.notify(
                    'Please contact admin', Status.Error, 'Internal server error');
        } else if (error.status === 400) {
            console.log(error._body);
            if (error._body)
                (<string[]>JSON.parse(error._body)).forEach((e) => {
                    this.notifficationsService.notify(
                        e, Status.Error);
                });
        }
        else {
            console.log(error._body);
        }
    }
}

@Injectable()
export class FileClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(public errorHandler: ErrorHandler, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getContacts(): Observable<ContactViewModel[]> {
        let url_ = this.baseUrl + "/api/File";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        addXsrfToken(options_);
        addAuthToken(options_);

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContacts(response_);
        }).catch((error: any) => {  
            this.errorHandler.handleErrors(error);
            return Observable.throw(error);
        });
    }

    protected processGetContacts(response: Response): Observable<ContactViewModel[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ContactViewModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ContactViewModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ContactViewModel[]>(<any>null);
    }

    saveContacts(fileVM: FilesViewModel): Observable<ComplexResultViewModel> {
        let url_ = this.baseUrl + "/api/File";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(fileVM ? fileVM.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        addXsrfToken(options_);
        addAuthToken(options_);

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSaveContacts(response_);
        }).catch((error: any) => {  
            this.errorHandler.handleErrors(error);
            return Observable.throw(error);
        });
    }

    protected processSaveContacts(response: Response): Observable<ComplexResultViewModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ComplexResultViewModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ComplexResultViewModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ComplexResultViewModel>(<any>null);
    }
}

export class ContactViewModel implements IContactViewModel {
    name?: string;
    phone?: string;
    index?: string;
    region?: string;
    city?: string;
    address?: string;
    issuedColumns?: string[];

    constructor(data?: IContactViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.phone = data["phone"];
            this.index = data["index"];
            this.region = data["region"];
            this.city = data["city"];
            this.address = data["address"];
            if (data["issuedColumns"] && data["issuedColumns"].constructor === Array) {
                this.issuedColumns = [];
                for (let item of data["issuedColumns"])
                    this.issuedColumns.push(item);
            }
        }
    }

    static fromJS(data: any): ContactViewModel {
        let result = new ContactViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["index"] = this.index;
        data["region"] = this.region;
        data["city"] = this.city;
        data["address"] = this.address;
        if (this.issuedColumns && this.issuedColumns.constructor === Array) {
            data["issuedColumns"] = [];
            for (let item of this.issuedColumns)
                data["issuedColumns"].push(item);
        }
        return data; 
    }
}

export interface IContactViewModel {
    name?: string;
    phone?: string;
    index?: string;
    region?: string;
    city?: string;
    address?: string;
    issuedColumns?: string[];
}

export class FilesViewModel implements IFilesViewModel {
    fileNames?: string[];

    constructor(data?: IFilesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["fileNames"] && data["fileNames"].constructor === Array) {
                this.fileNames = [];
                for (let item of data["fileNames"])
                    this.fileNames.push(item);
            }
        }
    }

    static fromJS(data: any): FilesViewModel {
        let result = new FilesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.fileNames && this.fileNames.constructor === Array) {
            data["fileNames"] = [];
            for (let item of this.fileNames)
                data["fileNames"].push(item);
        }
        return data; 
    }
}

export interface IFilesViewModel {
    fileNames?: string[];
}

export class ComplexResultViewModel implements IComplexResultViewModel {
    successfullySaved?: ContactViewModel[];
    issuedElements?: ContactViewModel[];
    errorMessages?: string[];
    warningMessages?: string[];

    constructor(data?: IComplexResultViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["successfullySaved"] && data["successfullySaved"].constructor === Array) {
                this.successfullySaved = [];
                for (let item of data["successfullySaved"])
                    this.successfullySaved.push(ContactViewModel.fromJS(item));
            }
            if (data["issuedElements"] && data["issuedElements"].constructor === Array) {
                this.issuedElements = [];
                for (let item of data["issuedElements"])
                    this.issuedElements.push(ContactViewModel.fromJS(item));
            }
            if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
                this.errorMessages = [];
                for (let item of data["errorMessages"])
                    this.errorMessages.push(item);
            }
            if (data["warningMessages"] && data["warningMessages"].constructor === Array) {
                this.warningMessages = [];
                for (let item of data["warningMessages"])
                    this.warningMessages.push(item);
            }
        }
    }

    static fromJS(data: any): ComplexResultViewModel {
        let result = new ComplexResultViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.successfullySaved && this.successfullySaved.constructor === Array) {
            data["successfullySaved"] = [];
            for (let item of this.successfullySaved)
                data["successfullySaved"].push(item.toJSON());
        }
        if (this.issuedElements && this.issuedElements.constructor === Array) {
            data["issuedElements"] = [];
            for (let item of this.issuedElements)
                data["issuedElements"].push(item.toJSON());
        }
        if (this.errorMessages && this.errorMessages.constructor === Array) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        if (this.warningMessages && this.warningMessages.constructor === Array) {
            data["warningMessages"] = [];
            for (let item of this.warningMessages)
                data["warningMessages"].push(item);
        }
        return data; 
    }
}

export interface IComplexResultViewModel {
    successfullySaved?: ContactViewModel[];
    issuedElements?: ContactViewModel[];
    errorMessages?: string[];
    warningMessages?: string[];
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}

function addAuthToken(options: any) {
    const authTokens = localStorage.getItem('auth-tokens');
    if (authTokens) {
        // tslint:disable-next-line:whitespace
        options.headers.append('Authorization', 'Bearer ' + JSON.parse(<any>authTokens).access_token);
    }
    return options;
}

function addXsrfToken(options:any) {
    const xsrfToken = getXsrfCookie();
    if (xsrfToken) {
        options.headers.append('X-XSRF-TOKEN', xsrfToken)
    }
    return options;
}

function getXsrfCookie(): string {
    const matches = document.cookie.match(/\bXSRF-TOKEN=([^\s;]+)/);
    try {
        return matches ? decodeURIComponent(matches[1]) : '';
    } catch (decodeError) {
        return '';
    }
}